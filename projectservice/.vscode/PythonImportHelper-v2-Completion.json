[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "CompanyModel",
        "importPath": "companyapp.models",
        "description": "companyapp.models",
        "isExtraImport": true,
        "detail": "companyapp.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "companyapp.models",
        "description": "companyapp.models",
        "isExtraImport": true,
        "detail": "companyapp.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "ServiceCitiesModel",
        "importPath": "serviceapp.models",
        "description": "serviceapp.models",
        "isExtraImport": true,
        "detail": "serviceapp.models",
        "documentation": {}
    },
    {
        "label": "ServiceModel",
        "importPath": "serviceapp.models",
        "description": "serviceapp.models",
        "isExtraImport": true,
        "detail": "serviceapp.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "serviceapp.models",
        "description": "serviceapp.models",
        "isExtraImport": true,
        "detail": "serviceapp.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "serviceapp.models",
        "description": "serviceapp.models",
        "isExtraImport": true,
        "detail": "serviceapp.models",
        "documentation": {}
    },
    {
        "label": "ServiceModel",
        "importPath": "serviceapp.models",
        "description": "serviceapp.models",
        "isExtraImport": true,
        "detail": "serviceapp.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "projectservice.globalimport",
        "description": "projectservice.globalimport",
        "isExtraImport": true,
        "detail": "projectservice.globalimport",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "projectservice.globalimport",
        "description": "projectservice.globalimport",
        "isExtraImport": true,
        "detail": "projectservice.globalimport",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "projectservice.globalimport",
        "description": "projectservice.globalimport",
        "isExtraImport": true,
        "detail": "projectservice.globalimport",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticatedOrReadOnly",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "TokenAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "ObtainAuthToken",
        "importPath": "rest_framework.authtoken.views",
        "description": "rest_framework.authtoken.views",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "userapp.models",
        "description": "userapp.models",
        "isExtraImport": true,
        "detail": "userapp.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "userapp.models",
        "description": "userapp.models",
        "isExtraImport": true,
        "detail": "userapp.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "userapp.serializers",
        "description": "userapp.serializers",
        "isExtraImport": true,
        "detail": "userapp.serializers",
        "documentation": {}
    },
    {
        "label": "Validate",
        "importPath": "projectservice.validation",
        "description": "projectservice.validation",
        "isExtraImport": true,
        "detail": "projectservice.validation",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "serviceapp.serializers",
        "description": "serviceapp.serializers",
        "isExtraImport": true,
        "detail": "serviceapp.serializers",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "companyapp.serializers",
        "description": "companyapp.serializers",
        "isExtraImport": true,
        "detail": "companyapp.serializers",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.contrib.gis.db.models.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.gis.db.models.fields",
        "description": "django.contrib.gis.db.models.fields",
        "detail": "django.contrib.gis.db.models.fields",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.contrib.gis.db",
        "description": "django.contrib.gis.db",
        "isExtraImport": true,
        "detail": "django.contrib.gis.db",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "django.contrib.gis.geos",
        "description": "django.contrib.gis.geos",
        "isExtraImport": true,
        "detail": "django.contrib.gis.geos",
        "documentation": {}
    },
    {
        "label": "GEOSGeometry",
        "importPath": "django.contrib.gis.geos",
        "description": "django.contrib.gis.geos",
        "isExtraImport": true,
        "detail": "django.contrib.gis.geos",
        "documentation": {}
    },
    {
        "label": "D",
        "importPath": "django.contrib.gis.measure",
        "description": "django.contrib.gis.measure",
        "isExtraImport": true,
        "detail": "django.contrib.gis.measure",
        "documentation": {}
    },
    {
        "label": "GeometryDistance",
        "importPath": "django.contrib.gis.db.models.functions",
        "description": "django.contrib.gis.db.models.functions",
        "isExtraImport": true,
        "detail": "django.contrib.gis.db.models.functions",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "companyapp.migrations.0001_initial",
        "description": "companyapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('serviceapp', '0003_rename_services_servicetypemodel_service'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CompanyModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "companyapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CompanyappConfig",
        "kind": 6,
        "importPath": "companyapp.apps",
        "description": "companyapp.apps",
        "peekOfCode": "class CompanyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'companyapp'",
        "detail": "companyapp.apps",
        "documentation": {}
    },
    {
        "label": "CompanyModel",
        "kind": 6,
        "importPath": "companyapp.models",
        "description": "companyapp.models",
        "peekOfCode": "class CompanyModel(models.Model):\n    company_name = models.CharField(max_length=100)\n    no_of_empoyees = models.CharField(max_length=100)\n    contact = models.CharField(max_length=12)\n    email = models.EmailField(max_length=100)\n    website = models.CharField(max_length=100)\n    cities = models.ManyToManyField(ServiceCitiesModel)\n    services = models.ManyToManyField(ServiceModel)\n    description = models.TextField()",
        "detail": "companyapp.models",
        "documentation": {}
    },
    {
        "label": "CompanySerializer",
        "kind": 6,
        "importPath": "companyapp.serializers",
        "description": "companyapp.serializers",
        "peekOfCode": "class CompanySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CompanyModel \n        fields = [\"company_name\",\"no_of_empoyees\",\"contact\",\"email\",\"website\",\"description\"]\nclass GetCompanySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CompanyModel \n        fields = '__all__'\n# class ServiceCitiesSerializer(serializers.ModelSerializer):\n#     class Meta:",
        "detail": "companyapp.serializers",
        "documentation": {}
    },
    {
        "label": "GetCompanySerializer",
        "kind": 6,
        "importPath": "companyapp.serializers",
        "description": "companyapp.serializers",
        "peekOfCode": "class GetCompanySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CompanyModel \n        fields = '__all__'\n# class ServiceCitiesSerializer(serializers.ModelSerializer):\n#     class Meta:\n#         model = ServiceCitiesModel\n#         fields = '__all__'\n# class ServiceSerializer(serializers.ModelSerializer):\n#     class Meta:",
        "detail": "companyapp.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "companyapp.urls",
        "description": "companyapp.urls",
        "peekOfCode": "urlpatterns = [\n   path('company/',Companyview.as_view()),\n]",
        "detail": "companyapp.urls",
        "documentation": {}
    },
    {
        "label": "Companyview",
        "kind": 6,
        "importPath": "companyapp.views",
        "description": "companyapp.views",
        "peekOfCode": "class Companyview(ListAPIView):#2 many 2 many ofields are......\n    serializer_class = GetCompanySerializer\n    authentication_classes = (TokenAuthentication,)\n    permission_classes =(AllowAny,)\n    def post(self,request):\n        id = self.request.POST.get(\"id\",'')\n        try:\n            if id:\n                if id.isdigit():\n                    company_qs = CompanyModel.objects.filter(id=id)  ",
        "detail": "companyapp.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "projectservice.asgi",
        "description": "projectservice.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "projectservice.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nif os.name == 'nt':\n    VENV_BASE = os.environ['VIRTUAL_ENV']\n    os.environ['PATH'] = os.path.join(VENV_BASE, 'Lib\\\\site-packages\\\\osgeo') + ';' + os.environ['PATH']\n    os.environ['PROJ_LIB'] = os.path.join(VENV_BASE, 'Lib\\\\site-packages\\\\osgeo\\\\data\\\\proj') + ';' + os.environ['PATH']\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = ')p-ca#*3&=#-tz9yf#s7rx&totnf(tm=tcm(jg-t#5z681g%i8'\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "SECRET_KEY = ')p-ca#*3&=#-tz9yf#s7rx&totnf(tm=tcm(jg-t#5z681g%i8'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'userapp',",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'userapp',\n    'serviceapp',\n    'companyapp',",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'projectservice.urls'",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "ROOT_URLCONF = 'projectservice.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "WSGI_APPLICATION = 'projectservice.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.contrib.gis.db.backends.postgis',\n        'NAME': 'servicedb',\n        'USER': 'postgres',\n        'PASSWORD': 'thanseer@97',\n        'HOST': '127.0.0.1',",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.contrib.gis.db.backends.postgis',\n        'NAME': 'servicedb',\n        'USER': 'postgres',\n        'PASSWORD': 'thanseer@97',\n        'HOST': '127.0.0.1',\n        'PORT': '',\n    }\n}",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'userapp.UserModel'",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'userapp.UserModel'",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'userapp.UserModel'",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "STATIC_URL = '/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'userapp.UserModel'",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'userapp.UserModel'",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "projectservice.settings",
        "description": "projectservice.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'userapp.UserModel'",
        "detail": "projectservice.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "projectservice.urls",
        "description": "projectservice.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('user/',include('userapp.urls')),\n    path('service/',include('serviceapp.urls')),\n    path('company/',include('companyapp.urls')),\n]",
        "detail": "projectservice.urls",
        "documentation": {}
    },
    {
        "label": "Validate",
        "kind": 2,
        "importPath": "projectservice.validation",
        "description": "projectservice.validation",
        "peekOfCode": "def Validate(data,mandatory):\n    not_present = []\n    for x in mandatory:\n        if x not in data:\n            not_present.append(x)\n            return (f\"{x} Is Not Presnet\")\n        else:\n            if data[x] == \"\":\n                not_present.append(x)\n                return (f\"{x} Cannot Use as null\" )",
        "detail": "projectservice.validation",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "projectservice.wsgi",
        "description": "projectservice.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "projectservice.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "serviceapp.migrations.0001_initial",
        "description": "serviceapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ServiceCitiesModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('country', models.CharField(max_length=100)),",
        "detail": "serviceapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "serviceapp.migrations.0002_remove_servicemodel_city_servicemodel_city",
        "description": "serviceapp.migrations.0002_remove_servicemodel_city_servicemodel_city",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('serviceapp', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='servicemodel',\n            name='city',\n        ),\n        migrations.AddField(",
        "detail": "serviceapp.migrations.0002_remove_servicemodel_city_servicemodel_city",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "serviceapp.migrations.0003_rename_services_servicetypemodel_service",
        "description": "serviceapp.migrations.0003_rename_services_servicetypemodel_service",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('serviceapp', '0002_remove_servicemodel_city_servicemodel_city'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='servicetypemodel',\n            old_name='services',\n            new_name='service',\n        ),",
        "detail": "serviceapp.migrations.0003_rename_services_servicetypemodel_service",
        "documentation": {}
    },
    {
        "label": "ServiceappConfig",
        "kind": 6,
        "importPath": "serviceapp.apps",
        "description": "serviceapp.apps",
        "peekOfCode": "class ServiceappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'serviceapp'",
        "detail": "serviceapp.apps",
        "documentation": {}
    },
    {
        "label": "ServiceTypeModel",
        "kind": 6,
        "importPath": "serviceapp.models",
        "description": "serviceapp.models",
        "peekOfCode": "class ServiceTypeModel(models.Model):\n    service = models.CharField(max_length=100)\n    description = models.TextField()\n    created_date =  models.DateTimeField(auto_now_add=True,null=True)\n    updated_date = models.DateTimeField(auto_now=True,null=True)\nclass ServiceCitiesModel(models.Model):\n    country = models.CharField(max_length=100)\n    city = models.CharField(max_length=100)\n    description = models.TextField()\nclass ServiceModel(models.Model):#auto add while adding companies",
        "detail": "serviceapp.models",
        "documentation": {}
    },
    {
        "label": "ServiceCitiesModel",
        "kind": 6,
        "importPath": "serviceapp.models",
        "description": "serviceapp.models",
        "peekOfCode": "class ServiceCitiesModel(models.Model):\n    country = models.CharField(max_length=100)\n    city = models.CharField(max_length=100)\n    description = models.TextField()\nclass ServiceModel(models.Model):#auto add while adding companies\n    service_type = models.ForeignKey(ServiceTypeModel,on_delete=models.CASCADE)\n    service_name = models.CharField(max_length=100)\n    city = models.ManyToManyField(ServiceCitiesModel)",
        "detail": "serviceapp.models",
        "documentation": {}
    },
    {
        "label": "ServiceModel",
        "kind": 6,
        "importPath": "serviceapp.models",
        "description": "serviceapp.models",
        "peekOfCode": "class ServiceModel(models.Model):#auto add while adding companies\n    service_type = models.ForeignKey(ServiceTypeModel,on_delete=models.CASCADE)\n    service_name = models.CharField(max_length=100)\n    city = models.ManyToManyField(ServiceCitiesModel)",
        "detail": "serviceapp.models",
        "documentation": {}
    },
    {
        "label": "ServiceTypeSerializer",
        "kind": 6,
        "importPath": "serviceapp.serializers",
        "description": "serviceapp.serializers",
        "peekOfCode": "class ServiceTypeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ServiceTypeModel \n        fields = '__all__'\nclass ServiceCitiesSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ServiceCitiesModel\n        fields = '__all__'\nclass ServiceSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "serviceapp.serializers",
        "documentation": {}
    },
    {
        "label": "ServiceCitiesSerializer",
        "kind": 6,
        "importPath": "serviceapp.serializers",
        "description": "serviceapp.serializers",
        "peekOfCode": "class ServiceCitiesSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ServiceCitiesModel\n        fields = '__all__'\nclass ServiceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ServiceModel\n        fields = '__all__'",
        "detail": "serviceapp.serializers",
        "documentation": {}
    },
    {
        "label": "ServiceSerializer",
        "kind": 6,
        "importPath": "serviceapp.serializers",
        "description": "serviceapp.serializers",
        "peekOfCode": "class ServiceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ServiceModel\n        fields = '__all__'",
        "detail": "serviceapp.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "serviceapp.urls",
        "description": "serviceapp.urls",
        "peekOfCode": "urlpatterns = [\n   path('servicetype/',ServiceTypeVew.as_view()),\n   path('servicecity/',ServicecitiesVew.as_view()),\n   path('service/',ServiceVew.as_view()),\n]",
        "detail": "serviceapp.urls",
        "documentation": {}
    },
    {
        "label": "ServiceTypeVew",
        "kind": 6,
        "importPath": "serviceapp.views",
        "description": "serviceapp.views",
        "peekOfCode": "class ServiceTypeVew(ListAPIView):\n    serializer_class = ServiceTypeSerializer\n    authentication_classes = (TokenAuthentication,)\n    permission_classes =(AllowAny,)\n    def post(self,request):\n        if self.request.user.id != None :\n            isadmin = self.request.user.is_admin\n            superuser = self.request.user.is_superuser\n            if isadmin==True or superuser == True  :\n                try:",
        "detail": "serviceapp.views",
        "documentation": {}
    },
    {
        "label": "ServicecitiesVew",
        "kind": 6,
        "importPath": "serviceapp.views",
        "description": "serviceapp.views",
        "peekOfCode": "class ServicecitiesVew(ListAPIView):\n    serializer_class = ServiceCitiesSerializer\n    authentication_classes = (TokenAuthentication,)\n    permission_classes =(AllowAny,)\n    def post(self,request):\n        if self.request.user.id != None :\n            isadmin = self.request.user.is_admin\n            superuser = self.request.user.is_superuser\n            if isadmin==True or superuser == True  :\n                try:",
        "detail": "serviceapp.views",
        "documentation": {}
    },
    {
        "label": "ServiceVew",
        "kind": 6,
        "importPath": "serviceapp.views",
        "description": "serviceapp.views",
        "peekOfCode": "class ServiceVew(ListAPIView):\n    serializer_class = ServiceSerializer\n    authentication_classes = (TokenAuthentication,)\n    permission_classes =(AllowAny,)\n    def post(self,request):\n        if self.request.user.id != None :\n            isadmin = self.request.user.is_admin\n            superuser = self.request.user.is_superuser\n            if isadmin==True or superuser == True  :\n                try:",
        "detail": "serviceapp.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "userapp.migrations.0001_initial",
        "description": "userapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "userapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "userapp.migrations.0002_remove_usermodel_address_locationmodel",
        "description": "userapp.migrations.0002_remove_usermodel_address_locationmodel",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('userapp', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='usermodel',\n            name='address',\n        ),\n        migrations.CreateModel(",
        "detail": "userapp.migrations.0002_remove_usermodel_address_locationmodel",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "userapp.migrations.0003_usermodel_is_admin",
        "description": "userapp.migrations.0003_usermodel_is_admin",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('userapp', '0002_remove_usermodel_address_locationmodel'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='usermodel',\n            name='is_admin',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "userapp.migrations.0003_usermodel_is_admin",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "userapp.migrations.0004_quotemodel",
        "description": "userapp.migrations.0004_quotemodel",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('serviceapp', '0003_rename_services_servicetypemodel_service'),\n        ('userapp', '0003_usermodel_is_admin'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='QuoteModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "userapp.migrations.0004_quotemodel",
        "documentation": {}
    },
    {
        "label": "UserappConfig",
        "kind": 6,
        "importPath": "userapp.apps",
        "description": "userapp.apps",
        "peekOfCode": "class UserappConfig(AppConfig):\n    name = 'userapp'",
        "detail": "userapp.apps",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "userapp.models",
        "description": "userapp.models",
        "peekOfCode": "class UserModel(AbstractUser):\n    mobile = models.CharField(max_length=100,blank=True)\n    is_admin = models.BooleanField(default=False)\nclass LocationModel(models.Model):\n    user = models.ForeignKey(UserModel,on_delete=models.CASCADE)\n    location = models.PointField(geography=True, blank=True, null=True)\n    place = models.CharField(max_length=100,null=True)\n    area = models.CharField(max_length=100,null=True)\n    street_no = models.CharField(max_length=100,null=True)\n    appartment_no = models.CharField(max_length=100,null=True)",
        "detail": "userapp.models",
        "documentation": {}
    },
    {
        "label": "LocationModel",
        "kind": 6,
        "importPath": "userapp.models",
        "description": "userapp.models",
        "peekOfCode": "class LocationModel(models.Model):\n    user = models.ForeignKey(UserModel,on_delete=models.CASCADE)\n    location = models.PointField(geography=True, blank=True, null=True)\n    place = models.CharField(max_length=100,null=True)\n    area = models.CharField(max_length=100,null=True)\n    street_no = models.CharField(max_length=100,null=True)\n    appartment_no = models.CharField(max_length=100,null=True)\nclass QuoteModel(models.Model):\n    userid = models.ForeignKey(UserModel,on_delete=models.CASCADE,null=True,blank=True)\n    service = models.ForeignKey(ServiceModel,on_delete=models.SET_NULL,null=True)",
        "detail": "userapp.models",
        "documentation": {}
    },
    {
        "label": "QuoteModel",
        "kind": 6,
        "importPath": "userapp.models",
        "description": "userapp.models",
        "peekOfCode": "class QuoteModel(models.Model):\n    userid = models.ForeignKey(UserModel,on_delete=models.CASCADE,null=True,blank=True)\n    service = models.ForeignKey(ServiceModel,on_delete=models.SET_NULL,null=True)\n    service_date = models.DateField()\n    locattion = models.CharField(max_length=100)\n    living_type = models.CharField(max_length=100)\n    description = models.TextField()\n    status = models.CharField(max_length=100)\n    created_date =  models.DateTimeField(auto_now_add=True)\n    updated_date = models.DateTimeField(auto_now=True)",
        "detail": "userapp.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "userapp.serializers",
        "description": "userapp.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserModel\n        fields = '__all__'\nclass LocaionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = LocationModel\n        fields = '__all__'\nclass QuoteSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "userapp.serializers",
        "documentation": {}
    },
    {
        "label": "LocaionSerializer",
        "kind": 6,
        "importPath": "userapp.serializers",
        "description": "userapp.serializers",
        "peekOfCode": "class LocaionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = LocationModel\n        fields = '__all__'\nclass QuoteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = QuoteModel\n        fields = '__all__'",
        "detail": "userapp.serializers",
        "documentation": {}
    },
    {
        "label": "QuoteSerializer",
        "kind": 6,
        "importPath": "userapp.serializers",
        "description": "userapp.serializers",
        "peekOfCode": "class QuoteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = QuoteModel\n        fields = '__all__'",
        "detail": "userapp.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "userapp.urls",
        "description": "userapp.urls",
        "peekOfCode": "urlpatterns = [\n   path('user/',UserView.as_view()),\n   path('userlocation/',LocationView.as_view()),\n   path('login/',LoginView.as_view()),\n   path('logout/',Logout.as_view()),\n   path('whoami/',WhoAmI.as_view()),\n   path('quote/',QuoteView.as_view()),\n]",
        "detail": "userapp.urls",
        "documentation": {}
    },
    {
        "label": "UserView",
        "kind": 6,
        "importPath": "userapp.views",
        "description": "userapp.views",
        "peekOfCode": "class UserView(ListAPIView):\n    serializer_class = UserSerializer\n    authentication_classes = (TokenAuthentication,)\n    permission_classes =(AllowAny,)\n    def get_queryset(self):\n        try:\n            user = self.request.GET.get(\"user\",'')#any value to filter the user data only\n            userid = self.request.user.id\n            qs = UserModel.objects.all()\n            if user: qs = qs.filter(id=userid)",
        "detail": "userapp.views",
        "documentation": {}
    },
    {
        "label": "WhoAmI",
        "kind": 6,
        "importPath": "userapp.views",
        "description": "userapp.views",
        "peekOfCode": "class WhoAmI(ListAPIView):\n    authentication_classes = (TokenAuthentication,)\n    permission_classes = (IsAuthenticatedOrReadOnly,)\n    def get(self,request):\n        try:\n            return Response({\n                \"Status\":1,\n                \"Data\":self.request.user.username   \n            })\n        except Exception as e: return Response({\"Status\":status.HTTP_400_BAD_REQUEST,\"Message\":str(e),})",
        "detail": "userapp.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "userapp.views",
        "description": "userapp.views",
        "peekOfCode": "class LoginView(ObtainAuthToken):\n    def post(self, request, *args, **kwargs):\n        # print(\"data\",self.request.data)\n        serializer = self.serializer_class(data=request.data,\n                                           context={'request': request})\n        # print(serializer)\n        try:\n            test = serializer.is_valid(raise_exception=True) \n            user = serializer.validated_data['user']\n            token, created = Token.objects.get_or_create(user=user)",
        "detail": "userapp.views",
        "documentation": {}
    },
    {
        "label": "Logout",
        "kind": 6,
        "importPath": "userapp.views",
        "description": "userapp.views",
        "peekOfCode": "class Logout(ListAPIView):\n    authentication_classes = (TokenAuthentication,)\n    permission_classes = (IsAuthenticatedOrReadOnly,)\n    def get(self,request):\n        try:\n            Data = Token.objects.get(user = self.request.user.id)\n            Data.delete()\n            # print(\"ok\")\n            return Response({\"Status\":status.HTTP_200_OK,\"Message\":\"logout successfully\"})\n        except Exception as e:",
        "detail": "userapp.views",
        "documentation": {}
    },
    {
        "label": "LocationView",
        "kind": 6,
        "importPath": "userapp.views",
        "description": "userapp.views",
        "peekOfCode": "class LocationView(ListAPIView):\n    serializer_class = LocaionSerializer\n    authentication_classes = (TokenAuthentication,)\n    permission_classes =(AllowAny,)\n    def post(self,request):\n        try:\n            mandatory = ['place','area','street_no','appartment_no']\n            data = Validate(self.request.data,mandatory)\n            id = self.request.POST.get(\"id\",\"\")   \n            userid = self.request.user.id ",
        "detail": "userapp.views",
        "documentation": {}
    },
    {
        "label": "QuoteView",
        "kind": 6,
        "importPath": "userapp.views",
        "description": "userapp.views",
        "peekOfCode": "class QuoteView(ListAPIView):\n    serializer_class = QuoteSerializer\n    authentication_classes = (TokenAuthentication,)\n    permission_classes =(IsAuthenticated,)\n    def post(self,request):\n        try:\n            id = self.request.POST.get(\"id\",\"\")  \n            service = self.data.POST.get(\"service\",'')\n            if service:\n                service_qs = ServiceModel.objects.filter(service_name=service)",
        "detail": "userapp.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'projectservice.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]